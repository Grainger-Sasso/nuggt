import argparse
import json
import matplotlib.cm
import numpy as np
import pandas
import xml.etree.ElementTree as ET
from urllib.request import urlopen

RGB_2_ACR_URL = "https://scalablebrainatlas.incf.org/templates/ABA_v3/template/rgb2acr.json"


def parse_args():
    parser = argparse.ArgumentParser(
        description="A program to convert the output of count-points-in-region "
        "to an .SVG brain map graphic."
    )
    parser.add_argument(
        "--svg-file",
        required=True,
        help="The SVG of the section to be colored. Download these from here: "
             "https://scalablebrainatlas.incf.org/mouse/ABA_v3#downloads")
    parser.add_argument(
        "--count-file",
        action="append",
        help="The count file generated by count-points-in-region. May be "
             "specified multiple times to include counts from different "
             "levels.")
    parser.add_argument(
        "--brain-regions-file",
        required=True,
        help="The AllBrainRegions.csv file giving the correspondence between "
             "names and IDs")
    parser.add_argument(
        "--output",
        required=True,
        help="The name of the SVG output file")
    parser.add_argument(
        "--rgb2acr-file",
        help="Mapping file of RGB color in the SVG to brain region acronym. "
        "Defaults to downloading from the scalable brain atlas."
    )
    parser.add_argument(
        "--colormap-name",
        help="Name of the colormap to use to color the regions",
        default="hot")
    parser.add_argument(
        "--invert",
        action="store_true",
        help="Invert the color map to flip low and high values.")
    return parser.parse_args()


def get_region_paths(svg_filename):
    """
    Find the XML elements that compose the region paths.

    :param svg_filename: Name of the .SVG file to read
    :return: a three-tuple of the XML tree, a list of path elements and the
    background rectangle.
    """
    tree = ET.parse(svg_filename)
    kids = tree.getroot().getchildren()
    grandkids = kids[0].getchildren()
    paths = [_ for _ in grandkids if _.tag == "{http://www.w3.org/2000/svg}path"]
    return tree, paths, grandkids[0]


def make_path_mappings(paths, brain_regions_file, rgb2acr_file=None):
    """
    Construct mappings of paths and IDs

    :param paths: the path elements parsed out of the SVG
    :param brain_regions_file: The filename of the AllBrainRegions.csv file
    :param rgb2acr_file: the filename of the json file giving the mapping
    between colors in the SVG and acronyms. If None, download from web.
    :return: a two-tuple of a list of two tuples of paths and IDs and a
    dictionary of path element indexed by ID.
    """
    structures = pandas.read_csv(brain_regions_file)

    with open(rgb2acr_file) \
            if rgb2acr_file is not None \
            else urlopen(RGB_2_ACR_URL) as fd:
        rgb2acr = json.load(fd)
    path_by_id = {}
    path_and_id = []
    for path in paths:
        color = path.attrib["fill"][1:]
        acronym = rgb2acr[color]
        str_id = structures.id[structures.acronym == acronym].values[0]
        path_by_id[str_id] = path
        path_and_id.append((path, str_id))
    return path_and_id, path_by_id


def make_intensity_map(data, segment_ids):
    """
    Create a map of densities per segment ID.
    :param data: a list of dataframes with count data in them
    :param segment_ids: a sequence of the segment IDs to map
    :return:
    """
    intensity_per_seg_id = {}
    for seg_id in segment_ids:
        for d in data:
            if np.sum(d.id == seg_id) > 0:
                count = d[d.id == seg_id]["count"].values[0]
                area = d[d.id == seg_id].area.values[0]
                break
        else:
            print("skipping segid=%d" % seg_id)
            count = 0
        intensity = count / area
        intensity_per_seg_id[seg_id] = intensity
    return intensity_per_seg_id


def recolor_path_elements(intensity_per_seg_id, path_and_id,
                          colormap_name, invert=False):
    """
    Change the fill colors of the region path elements based on the
    densities in each region.

    :param intensity_per_seg_id: map of intensities for each segment ID
    :param path_and_id: two-tuple of path and segment ID
    :param colormap_name: The matplotlib colormap to use, e.g. "hot" or "jet"
    :param invert: If True, invert the color map so that low densities have
    stronger colors.
    """
    intensities = np.array(list(intensity_per_seg_id.values()))
    if invert:
        intensities = -intensities
    colors = (matplotlib.cm.ScalarMappable(cmap=colormap_name).to_rgba(
        intensities) * 255).astype(int)
    color_per_seg_id = {}
    for seg_id, color in zip(intensity_per_seg_id.keys(), colors):
        color_per_seg_id[seg_id] = color
    for path, seg_id in path_and_id:
        if intensity_per_seg_id[seg_id] == 0:
            str_color = "#FFFFFF"
        else:
            color = color_per_seg_id[seg_id]
            str_color = "#%02x%02x%02x" % (color[0], color[1], color[2])
        path.attrib["fill"] = str_color
        path.attrib["stroke"] = "#AAAAAA"
        path.attrib["stroke-width"] = "1"


def main():
    args = parse_args()
    tree, paths, rect = get_region_paths(args.svg_file)
    rect.attrib["fill"] = "#FFFFFF"
    data = [pandas.read_csv(_) for _ in args.count_file]
    path_and_id, path_by_id = make_path_mappings(
        paths, args.brain_regions_file, args.rgb2acr_file)
    intensity_per_seg_id = make_intensity_map(data, path_by_id.keys())
    recolor_path_elements(intensity_per_seg_id, path_and_id,
                          args.colormap_name, args.invert)
    tree.write(args.output)


if __name__ == "__main__":
    main()
